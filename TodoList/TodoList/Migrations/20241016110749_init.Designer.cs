// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoList.Entities;

#nullable disable

namespace TodoList.Migrations
{
    [DbContext(typeof(WorkTaskDBContext))]
    [Migration("20241016110749_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TodoList.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TodoList.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jan123@wp.pl",
                            Username = "Jan123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jakub123@wp.pl",
                            Username = "Jakub123"
                        });
                });

            modelBuilder.Entity("TodoList.Entities.WorkTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 16, 13, 7, 49, 227, DateTimeKind.Local).AddTicks(8844),
                            Description = "Skosic trawe wokol domu. Wyczyscic kosiarke po wykonaniu zadania oraz odlozyc na miejsce w garazu.",
                            ExpectedEndDate = new DateTime(2024, 10, 23, 13, 7, 49, 227, DateTimeKind.Local).AddTicks(8812),
                            IsCompleted = false,
                            Title = "Skosic Trawe",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 16, 13, 7, 49, 227, DateTimeKind.Local).AddTicks(8848),
                            Description = "Odkurzyc w kazdym pokoju po czym zmyc podlogi.",
                            ExpectedEndDate = new DateTime(2024, 10, 23, 13, 7, 49, 227, DateTimeKind.Local).AddTicks(8846),
                            IsCompleted = false,
                            Title = "Posprzatac w domu",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TodoList.Entities.Notification", b =>
                {
                    b.HasOne("TodoList.Entities.WorkTask", "Task")
                        .WithOne("Notification")
                        .HasForeignKey("TodoList.Entities.Notification", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TodoList.Entities.WorkTask", b =>
                {
                    b.HasOne("TodoList.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoList.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TodoList.Entities.WorkTask", b =>
                {
                    b.Navigation("Notification");
                });
#pragma warning restore 612, 618
        }
    }
}
